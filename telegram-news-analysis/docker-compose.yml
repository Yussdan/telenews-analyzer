version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: telegram_postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telegram_news"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      POSTGRES_USER: telegram_news
      POSTGRES_PASSWORD: telegram_password
      POSTGRES_DB: telegram_news
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - telegram_news_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      telegram_news_network:
        aliases:
          - zookeeper

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - telegram_news_network

  mongodb:
    image: mongo:5.0
    container_name: telegram_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok || db.adminCommand("ping").ok' || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - telegram_news_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: telegram-news-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 180s
    networks:
      - telegram_news_network

  collector:
    build:
      context: ./src/collector
      dockerfile: Dockerfile
    container_name: telegram-news-collector
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=telegram_messages
      - MONGODB_URI=mongodb://mongodb:27017
    volumes:
      - telegram_sessions:/app/sessions
    networks:
      - telegram_news_network

    spark-master:
  image: bitnami/spark:3.5
  container_name: spark-master
  ports:
    - "8080:8080"  # Web UI
    - "7077:7077"  # Master port
  environment:
    - SPARK_MODE=master
    - SPARK_RPC_AUTHENTICATION_ENABLED=no
    - SPARK_RPC_ENCRYPTION_ENABLED=no
    - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
    - SPARK_SSL_ENABLED=no
  networks:
    - telegram_news_network

  spark-worker:
    image: bitnami/spark:3.5
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      - telegram_news_network

  processor:
    build:
      context: ./src/processor
      dockerfile: Dockerfile
    container_name: telegram-news-processor
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - KAFKA_BROKERS=kafka:9092
    env_file:
      - .env
    networks:
      - telegram_news_network

  api:
    build:
      context: ./src/api
      dockerfile: Dockerfile
    container_name: telegram-news-api
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "5050:5050"
    env_file:
      - .env
    networks:
      - telegram_news_network

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: telegram-news-frontend
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      api:
        condition: service_started
    env_file:
      - .env
    networks:
      - telegram_news_network

networks:
  telegram_news_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
  mongodb_data:
  elasticsearch_data:
  telegram_sessions:
